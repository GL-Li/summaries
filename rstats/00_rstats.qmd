## Basic concepts

### Installation

R is not in registry on Window. So `path/to/Rscript.exe xxx.R` will run from command line. Under the installation directory, the following subdirectories are not required for `Rscript.exe`:

- Tcl/
- tests/
- doc/
- share/
- subdir in library/
  - translations/
  - KernSmooth
  - spatial
  - survival
  - mgcv
  - rpart
  - nlme

required packages
- tools

local-installed-package, tried to delete 3, all required
- zip
- tzdb
- Rcpp

These base packages must stay in R-4.4.1/library/ and cannot be moved to user library.
`base  compiler  datasets  grDevices  graphics  grid  methods  parallel  stats  tools  utils`


### Collect all termimal output from Rscript run
Collect both the standard output and error:
- package loading message and warnings are part of error.
- we can see the printout on terminal and the same time the message is sent to the log file.

`$ Rscript xxx.R 2>&1 | tee xxx.log`


### import an environment to .GlobalEnv

```{r}
# save an env object to RDS file
saveRDS(env_i, file = "env_i.RDS")

# clear global environment
rm(list = ls(envir = .GlobalEnd), envir = .GlobalEnv)

# read the saved environment
env_i <- readRDS("env_i.RDS")

# load all objects in env_i to global environment
list2env(as.list(env_i), envir = .GlobalEnv)

# delete env_i from global environment
rm("env_i")
```

### catch exit status with system()

For example, we have a test file `ttt.R`, which has a quit statement
```{r}
print("stat the test")
quit(save = "no", status = 5) # nolint
```
In another file `ttt_run.R`, which runs `ttt.R` with `system()` function:
```{r}
# pass exit status 5 to exit_status
std_out <- system("Rscript ttt.R ; echo $?", intern = TRUE)
exit_status <- std_out[length(std_out)]
print(exit_status)
```
From terminal, when we run $ Rscript ttt_run.R, it will print 5 to stdout.


### garbage collector gc()
Automatically collect local objects in a function after the function run completed.
```{r}
# all garbage in a function is collected after function completion
mem_test <- function() {
  dt <- data.frame(
    x = 1:N,
    y = rnorm(N)
  )
  print(pryr::mem_used())
  return(mean(dt$y))
}

N <- 1.5e9
for (i in 1:20) {
  print(i)
  avg <- mem_test()
  print(avg)
  print(pryr::mem_used())
}
```

In a for loop, garbage collector only runs after the object in the new iteration has been created. So must explicitly remove the large object before next iteration. `gc()` is automatically applied after `rm()`.
```{r}
# must use rm() to remove dt to give a fresh start for next iteration
# otherwise 2 times of the size of dt is required.
N <- 1.5e9
for (i in 1:100) {
  print(i)
  dt <- data.frame(
    x = 1:N,
    y = rnorm(N)
  )
  avg <- mean(dt$y)

  print(pryr::mem_used())
  rm(dt)
  #gc()
  print(pryr::mem_used())
}
```


### Use a variable of a function

```{r}
fun_var <- "mean"
get(fun_var)(1:9)  # same as mean(1:9)
```