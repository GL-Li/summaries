---
title: "Untitled"
format: html
---


### future package for parallel computing

- good for long time and small global objects
    - only globals used by `future({...})` are exported to new R session.
    - default limit if 500 MB that can be exported
    - edit the limit with `options(future.globals.maxSize = 1e9)`
    - memory not released in future session in interactive run
    - all memory release if run with `Rscript aaa.R`, takes time to release large memory.

- example code:
    ```R
    library(future)
    # use miltisession for parallel computing
    plan(multisession)
    # print out process ID just to show that different session are used
    print(Sys.getpid())

    # create a future which takes at least 10 sec to finish
    f1 <- future({
      Sys.sleep(10)
      print(Sys.getpid())
      cat("f1: Hello World!\n")
      "111"
    })

    # in multisession, no need to wait 10 sec for f1
    print("f1 created")

    # another future taking 10 sec
    f2 <- future({
      Sys.sleep(10)
      print(Sys.getpid())
      cat("f2: Hello World!\n")
      "222"
    })

    # no need to wait for f2
    print("f1 and f2 futures created ------")
    
    # after 10 sec, both f1 and f2 are completed at background so we
    # evaluate v1 and v1. Multisession saves 10 secs compared to sequential
    v1 <- value(f1)
    print(v1)
    v2 <- value(f2)
    print(v2)

    print("end of the test")
    ```
    
- same code put in function and check time:
    ```r
    library(future)
    plan(multisession)
    print(Sys.getpid())

    fff <- function() {
      f1 <- future({
        Sys.sleep(10)
        print(Sys.getpid())
        cat("f1: Hello World!\n")
        "111"
      })

      print("f1 created")

      f2 <- future({
        Sys.sleep(10)
        print(Sys.getpid())
        cat("f2: Hello World!\n")
        "222"
      })

      print("f1 and f2 futures created ------")
      v1 <- value(f1)
      print(v1)
      v2 <- value(f2)
      print(v2)

      print("end of the test")

      return(list(f1 = v1, f2 = v2))
    }

    # finish in 10.3 secs instead of 20+
    system.time({
      f <- fff()
    })
    ```
    
- code to test memory exported to future session
    ```R
    options(future.globals.maxSize = 5e9)
    library(future)
    plan(multisession)
    print(Sys.getpid())

    # generate a large global object
    x <- rnorm(5e8)

    Sys.sleep(10)
    print("x created")

    fff <- function() {
      f1 <- future({
        # this future session need this large object
        # x is exported to this session
        xxx <- length(x)
        print(xxx)
        Sys.sleep(10)
        print(Sys.getpid())
        cat("f1: Hello World!\n")
        "111"
      })

      print("f1 created")

      f2 <- future({
        # this future session does not need this large object
        Sys.sleep(10)
        print(Sys.getpid())
        cat("f2: Hello World!\n")
        "222"
      })

      print("f1 and f2 futures created ------")
      v1 <- value(f1)
      print(v1)
      v2 <- value(f2)
      print(v2)

      print("end of the test")

      return(list(f1 = v1, f2 = v2))
    }

    system.time({
      f <- fff()
    })
    ```
    
    
### doFuture package to parallelize for loops

- basic example:
    ```R
    options(future.globals.maxSize = 5e9)
    library(doFuture)
    plan(multisession)


    # just to check time, can be removed
    # completed in 10.5 seconds instead of 40+ seconds
    system.time({
      # run each in parallel, return a list
      y <- foreach(x = 3:6) %dofuture% {
        Sys.sleep(10)
        c(sqrt(x), x, x^2)  # final return
      }
    })

    # y is a list y[[1]], y[[2]], ... for the return of each x
    y
        # [1] 1.732051 3.000000 9.000000
        #
        # [[2]]
        # [1]  2  4 16
        #
        # [[3]]
        # [1]  2.236068  5.000000 25.000000
        # 
        # [[4]]
        # [1]  2.44949  6.00000 36.00000
    ```


### Use future with for loops without foreach

To break a large data into small pieces and feed each small piece into a thread, we can use the future function, which is more flexible than `foreach ... %dofuture%`. 

```R
options(future.globals.maxSize = 5e9)
library(doFuture)
plan(multisession)
library(dplyr)

N <- 20
dat_raw <- data.frame(
  group = rep(letters[1:N], 100000),
  value = rnorm(2000000)
)

# set up futures
t0 <- Sys.time()
for (grp in letters[1:N]) {
  dat <- dat_raw |>
    filter(group == grp)
  assign(paste0("group", grp), future({
    Sys.sleep(10)
    c(total = sum(dat$value), avg = mean(dat$value))
  }))
}
print(Sys.time() - t0)

# collect values
res <- list()
t0 <- Sys.time()
for (x in letters[1:N]) {
  res[[x]] <- value(get(paste0("group", x)))
}
print(Sys.time() - t0)


# here is a more efficient way to do it. The two methods give the same results.

t0 <- Sys.time()
# a list of futures
ft <- list()

for (grp in letters[1:N]) {
  dat <- dat_raw |>
    filter(group == grp)
  ft[[grp]] <- future({
    Sys.sleep(10)
    c(total = sum(dat$value), avg = mean(dat$value))
  })
}
print(Sys.time() - t0)

t0 <- Sys.time()
# use lapply to get the values
res <- lapply(ft, value)
print(Sys.time() - t0)
```
