---
title: "S7"
format: html
---

## Official example

```{r}
range <- new_class("range",
  properties = list(
    start = class_double,
    end = class_double
  ),
  validator = function(self) {
    if (length(self@start) != 1) {
      "@start must be length 1"
    } else if (length(self@end) != 1) {
      "@end must be length 1"
    } else if (self@end < self@start) {
      "@end must be greater than or equal to @start"
    }
  }
)

x <- range(start = 1, end = 10)
y <- range(start = 1:2, end = "a")
```

## Create a new class that inherits all properties of data.frame with additional validator

```{r}
library(S7)

selfsrv_data <- S7::new_class(
  "selfsrv_data",
  properties = list(
    # specify classes for each property
    data = class_data.frame,
    type = class_character
  ),
  validator = function(self) {
    # the string the function returns is the error message
    error_list <- character(0)
    for (col in names(self@type)) {
      if (class(self@data[[col]]) != self@type[col]) {
        error_list <- c(
          error_list,
          sprintf(
            "Column '%s' type does not match expected type '%s'",
            col, self@type[col]
          )
        )
      }
    }
    if (length(error_list) > 0) {
      return(error_list)
    }
  }
)

# case 1: no error
dat <- data.frame(
  x = 1:3,
  name = letters[1:3]
)
col_types <- c(x = "integer", name = "character")
df0 <- selfsrv_data(
  data = dat,
  type = col_types
)

# case 2: validation error
dat <- data.frame(
  x = c(1.1, 2, 3),
  name = 1:3
)
col_types <- c(x = "integer", name = "character")
df0 <- selfsrv_data(
  data = dat,
  type = col_types
)

# case 1: no error, data.table
dat <- data.table::data.table(
  x = 1:3,
  name = letters[1:3]
)
col_types <- c(x = "integer", name = "character")
df0 <- selfsrv_data(
  data = dat,
  type = col_types
)
```