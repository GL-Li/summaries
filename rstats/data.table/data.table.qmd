## Why use data.table for production instead of dplyr

### minimal dependencies
- data.table: only imports package `methods`, which is required package for any R distribution.
- dplyr: imports 13 packages, 11 of them are thirty party packages that are not part of a distribution. The 11 third party packages have their own dependencies.

### fast execution and efficient memory management
Run `speed_filter_mutate.R` and `speed_group_by_sumarize.R` for benchmarks.


## data.table fundamentals

### concise syntex `dt[i, j, by]`
- i: select rows
- j: operation on columns 
- by: specify group_by columns
  
Examples: in the following examples, `list(...)` can be replaced with `.(...)`. In package development, `list(...)` is preferred.
```{r}
library(data.table)
set.seed(123)
dt <- data.table(
  id = 1:8,
  g1 = letters[1:2],
  g2 = LETTERS[1:4],
  y1 = rnorm(8),
  y2 = rnorm(8) + 100
)

# filter / slice rows
dt[id >= 5]
dt[c(1, 3, 8)]

# select columns
dt[, list(id, g1, y1)]

# mutate columns
dt[, y12 := y1 + y2]

# arrange by columns
dt[order(y1)]

# group_by and summarize
dt[, list(mean(y1)), by = "g1"]

# rename
setnames(dt, "id", "id_new")

# distinct
dt[, list(g1, g2)] |>
  unique()

# pull the values of a column into a vector
dt[, g1]   # same as dt$g1 and dt[["g1"]]
```

### more use cases
```{r}
# update columns for selected rows, mutate(... ifelse() ... )
dt[g1 %in% c("a", "c"), y1 := 999]
dt
dt[g1 %in% c("b", "c"), 
   `:=`(y1 = 999, y2 = 0)]
dt

# add new columns
dt[id_new %% 2 == 0, is_even := TRUE]

# group_by - summarize multiple columns
dt[,
   list(avg1 = mean(y1), 
        avg2 = mean(y2)),
   by = c("g1", "g2")]
```


### Work with variables
When column names are stored in a variable.

Select columns by variable
```{r}
dt <- data.table(x = 1:3, y = 2:4, z = 5:7)
cols <- c("x", "z")
dt[, cols, with = FALSE]

# new: use env list
dt[, cols, env = list(cols = I(c("x", "z")))]
```

Update a column by variable
```{r}
dt <- data.table(x = 1:3, y = 2:4, z = 5:7)
dt
col <- "z"
dt[, (col) := 999]
dt

# New: provide names in an env list
dt <- data.table(x = 1:3, y = 2:4, z = 5:7)
dt
dt[, col := 999, env = list(col = "z")]
dt
```

Get column values by variable
```{r}
dt <- data.table(x = 1:3, y = 2:4, z = 5:7)
dt
col <- "z"
dt[get(col) >= 6]

#  new: use env list
dt <- data.table(x = 1:3, y = 2:4, z = 5:7)
dt
dt[col >= 6, env = list(col = "z")]

col1 = "z"
col2 = "x"
dt[col1 >= 6, 
   list(col1, col2),
   env = list(col1 = col1, col2 = col2)]

# i, j, by
dt <- data.table(
  grp = c("g1", "g2", "g1", "g2", "g3"),
  level = c("lvl1", "lvl1", "lvl1", "lvl2", "lvl2"),
  x = 1:5,
  y = 5:9
)
dt[grp != "g3",
   list(avg_x = mean(x), avg_y = mean(y)),
   by = c("grp", "level")]

dt[aaa != "g3", 
   list(avg_x = mean(bbb), avg_y = mean(ccc)),
   by = ddd,
   env = list(aaa = "grp", bbb = "x", ccc = "y", ddd = I(c("grp", "level")))]
```


### Special Symbols in `data.table`

#### `.N`
- Represents the number of rows in the current group when using `by`. 
- When used without `by`, it gives the total number of rows in the `data.table`.

**Usage:**
```{r}
dt <- data.table(id = c(1, 1, 2, 2), x = c(5, 6, 7, 8))
# Number of rows in each group defined by 'id'
dt[, .(count = .N), by = id]
```

#### `.SD` (Subset of Data)
- A 'data.table' itself containing the Subset of Data for each group. 
- Used with `by` for operations on lower-level groupings.
- It doesn't include the columns used in the `by` in the subset by default.

**Usage:**
```{r}
# Calculate the mean of all remaining columns within each group defined by 'id'
dt <- data.table(id = c(1, 1, 2, 2), x = 1:4, y = 5:8)
dt[, lapply(.SD, mean), by = id]
```

#### `.SDcols`
- If you want to specify which columns to include in `.SD`, you can use `.SDcols`.

**Usage:**
```{r}
dt <- data.table(id = c(1, 1, 2, 2), x = 1:4, y = 5:8)
# Mean for specified columns
dt[, lapply(.SD, mean), by = id, .SDcols = c("x")]
```

#### `.I`
- Refers to the row numbers in the original `data.table`.

**Usage:**
```{r}
dt <- data.table(id = c(1, 2, 2, 1), x = 1:4, y = 5:8)
# Return the row numbers of the first occurrence in each group
dt[, .I[1], by = id]
# all row numbers by group
dt[, .I, by = id]
```


### join / merge

#### Merge dt2 into dt1 with `merge(dt1, dt2, ...)`
To preserve the row order of dt1, set `sort = FALSE`
```{r}
dt1 <- data.table(id = c(5:8, 4:1), y1 = letters[1:8])
dt2 <- data.table(id = 7:4, y2 = LETTERS[5:8])
merge(dt1, dt2, by = "id", all.x = TRUE, sort = FALSE)
```

#### join dt2 into dt1 with `dt2[dt1, on = ...]`
```{r}
dt1 <- data.table(id = c(5:8, 4:1), y1 = letters[1:8])
dt2 <- data.table(id = 7:4, y2 = LETTERS[5:8])
dt2[dt1, on = "id"]
```



### melt: wide to long table

```{r}
library(data.table)

# example 1
dt <- data.table(
  group = c("g1", "g2"),
  c1 = 1:2,
  c2 = 4:5,
  c3 = 8:9
)
dt_long <- melt(
  data = dt,
  id.vars = "group",
  measure.vars = c("c1", "c2", "c3"),
  variable.name = "factor",
  value.name = "count",
  variable.factor = FALSE
)
dt_long

# example 2
dt <- data.table(
  c1 = 1,
  c2 = 2,
  c3 = 3
)
dt_long <- melt(
  data = dt,
  id.vars = NULL,
  measure.vars = names(dt),
  variable.name = "group",
  value.name = "count",
  variable.factor = FALSE
)
dt_long
```


### dcast: long to wide table

```{r}
# example 1
aaa <- data.table(group = rep(c("g1", "g2"), each = 3),
                  x = rep(letters[1:3], 2), 
                  y = 3:8,
                  z = 999)
aaa
bbb <- dcast(aaa, group ~ x, value.var = "y")
bbb


# example 2: no grouping columns
aaa <- data.table(x = letters[1:3], y = 5:3)
aaa
bbb <- dcast(aaa, NULL ~ x, value.var = "y")
bbb
# bbb has an extra column whose name and value are "."
names(bbb)
bbb$. <- NULL
```


### flexible columns selection with `patterns()`
Use `.SD` and `.SDcols = patterns("pattern")`
```{r}
dt <- data.table(
  grp = c("g1", "g2", "g3"),
  x1 = 1:3,
  x2 = 2:4,
  xx = 3:5,
  x1x = 4:6,
  y1 = letters[1:3],
  yx = letters[2:4]
)
# select column starts with x
dt[, .SD, .SDcols = patterns("^x")]
# select grp and columns start with x
dt[, .SD, .SDcols = patterns("grp|^x")]
# more complicated patterns
dt[, .SD, .SDcols = patterns("^x[^2]*")]
# ends with x
dt[, .SD, .SDcols = patterns("x$")]
# contains 1
dt[, .SD, .SDcols = patterns("1")]

# melt
melt(dt, measure.vars = patterns("^x\\d"))
```



## Advanced topics


### in-place update
Operations like `:=` and `setnames()` modify the data.table directly. No need to assign the modified data.table to a new variable.

This is a feature that saves memory but is also dangerous - you may accidentally changed a data.table, as shown in the example below.

#### Example 1: two variables point to the same memory
```{r}
# dt is accidentally modified even if there is no direct operation on it
dt <- data.table(x1 = letters[1:3], x2 = LETTERS[1:3])
aaa <- dt
aaa[, y := rnorm(3)] |>
  _[, list(avg = mean(y)), by = "x1"]
aaa
dt

# use copy to avoid the accident if memory is not a concern
dt <- data.table(x1 = letters[1:3], x2 = LETTERS[1:3])
aaa <- copy(dt)
aaa[, y := rnorm(3)] |>
  _[, list(avg = mean(y)), by = "x1"]
aaa
dt
```

#### Example 2: even in a function
```{r}
dt <- data.table(x1 = letters[1:3], x2 = LETTERS[1:3])

# this function modifies dt in global environment even though the change
# is in the function local environment. The reason is that both dt in global
# and local environment point to the same memory address.
concat_2_cols <- function(dt) {
  dt[, x12 := paste0(x1, x2)]
  return(dt$x12)
}
res <- concat_2_cols(dt)
dt

# if memory is not a concern and you do not want to change dt,
# make a copy of dt
concat_2_cols <- function(dt) {
  dt <- copy(dt)
  dt[, x12 := paste0(x1, x2)]
  return(dt$x12)
}

dt <- data.table(x1 = letters[1:3], x2 = LETTERS[1:3])
res <- concat_2_cols(dt)
dt
```


### in-place join-update
Run `speed_inplace_join.R` to compare the speed to data.table merge and dplyr left_join.

To add column in dt2 to dt1 in-place
```{r}
dt1 <- data.table(id1 = c(5:8, 4:1), y1 = letters[1:8], y2 = "xyz")
dt1
dt2 <- data.table(id2 = 7:4, y2 = LETTERS[5:8], y3 = 999, y4 = 0)
dt2
dt1[dt2, on = c("id1" = "id2"), `:=`(y2 = i.y2, y3 = i.y3)]
dt1
```


### programming on data.table
https://rdatatable.gitlab.io/data.table/articles/datatable-programming.html




## fread

### colClass
colClass can be a named vector that sepcify classes of selected columns. Unfortunately, it cannot override a higher type to a lower one. For example, if a column has characters, the column cannot be read into integer. So the colClass for this column is ignored.

Order of types in R: character > numeric > integer

If the higher to lower class reading is intended, do this after reading.

```{r}
library(data.table)
# a sample aaa.csv file
aaa <- utils::read.table(header = TRUE, text = "
 x y z t
 a 1 0 3.14
 b 2 0 1
")
fwrite(aaa, file = "aaa.csv")

col_class <- c(x = "numeric", y = "character", t = "integer")
aaa <- fread("aaa.csv", colClass = col_class)

# result
# - x is read into character. numeric class is ignored.
# - y is read into character "1", "2"
# - z is determined by fread function.
# - t is read into numeric, not integer

# forced conversion
for (col in names(col_class)) {
  if (class(aaa[[col]]) != col_class[col]) {
    if (col_class[col] == "numeric") {
      aaa[[col]] <- as.numeric(aaa[[col]])
    }
    if (col_class[col] == "integer") {
      aaa[[col]] <- as.integer(aaa[[col]])
    }
  }
}
```

## Join `dt2` to`dt1` inplace
Without copying data, join selected columns in `dt2` to `dt1`

```{r}
library(data.table)
dt1 <- data.table(
  id = 1:3,
  x = letters[1:3]
)
dt2 <- data.table(
  id = 1:3,
  y = LETTERS[1:3],
  z = rnorm(3),
  t = "qqqq"
)

# join y and z from dt2 to dt1 in place
dt1[
  dt2,
  on = "id",
  ":="(y = i.y, z = i.z)
]
#       id      x      y          z
#    <int> <char> <char>      <num>
# 1:     1      a      A -1.0798453
# 2:     2      b      B -0.5736653
# 3:     3      c      C -0.7555166
```


## Fast set data.table elements in a for loop
Try best to avoid for loop over rows in R. If have to, use `set` command with data.table

```{r}
library(data.table)

dt <- data.table(
  id = 1:1e5,
  x = "aaa",
  y = 0
)

# inplace update with :=, 41 sec
system.time({
  s <- 0
  for (i in 1:1e5) {
    s <- s + i
    dt[i, y := s]
  }
})

# update with set, 0.29 sec, > 100 times faster
system.time({
  s <- 0
  for (i in 1:1e5) {
    s <- s + i
    # i for row and j for column
    set(dt, i = i, j = 3L, s)
  }
})


# timing with dplyr
library(dplyr)
n <- 1e5
df <- tibble(
  id = 1:n,
  x = "aaa",
  y = 0
)

# 30 sec
system.time({
  s <- 0
  for (i in 1:n) {
    s <- s + i
    df[i, "y"] <- s # no copy either
  }
})
```

Additional comparison between `set()` and `:=`:
```{r}
library(data.table)
n <- 1e7

dt <- data.table(
  id = 1:n,
  x = "aaa",
  y = 1:n,
  z = 1:n + 100
)

# 4.8 sec
system.time({
  for (i in 1:n) {
    set(dt, i = i, j = 3L, dt$z[i])
  }
})

# 0.014 sec, much faster than one by one update
system.time({
  set(dt, i = 1:n, j = 3L, dt$z)
})

# 0.002 sec, much faster
system.time({
  dt[, y := z]
})


library(dplyr)
df <- tibble(
  id = 1:n,
  x = "aaa",
  y = 1:n,
  z = 1:n + 100
)

# 0.002 sec
system.time({
  df <- df |>
    mutate(y = z)
})
```

A even better example

```{r}
library(data.table)
library(dplyr)
library(stringi)

N <- 1e7
set.seed(111)
cat("\ncreating data ---------\n")
ss <- c("aa", "bb", "cc", "dd", "ee", "ff")
df <- data.frame(
  id = 1:N,
  x = "aaa",
  y = rnorm(N),
  aa = paste0(sample(ss), rnorm(N))
)

cat("\ndata.table := --------------------\n")
dt <- as.data.table(df)
pryr::address(dt)
system.time({
  dt[y > 1, aa := stri_replace_all_fixed(aa, "aa", "xxxxxxxx")]
})
pryr::address(dt)


cat("\ndplyr if_else ----------------------------\n")
tb <- as_tibble(df)
pryr::address(tb)
system.time({
  tb <- tb |>
    mutate(aa = if_else(y > 1, stri_replace_all_fixed(aa, "aa", "xxxxxxxx"), aa))
})
pryr::address(tb)


cat("\ndata.table set -------------------\n")
dt1 <- as.data.table(df)
pryr::address(dt1)
system.time({
  ii <- which(dt1$y > 1)
  set(dt1, i = ii, j = 4L, stri_replace_all_fixed(dt1$aa[ii], "aa", "xxxxxxxx"))
})
pryr::address(dt1)

cat("\ndplyr case_when ----------------------------\n")
tb1 <- as_tibble(df)
system.time({
  tb1 <- tb1 |>
    mutate(aa = case_when(
      y > 1 ~ stri_replace_all_fixed(aa, "aa", "xxxxxxxx"),
      .default = aa
    ))
})

cat("\nnative data.frame ----------------\n")
df0 <- df
pryr::address(df0)
system.time({
  ii <- which(df0$y > 1)
  df0$aa[ii] <- stri_replace_all_fixed(df0$aa[ii], "aa", "xxxxxxxx")
})
pryr::address(df0)

stopifnot(all(dt$aa == dt1$aa))
stopifnot(all(dt$aa == tb$aa))
stopifnot(all(dt$aa == tb1$aa))
stopifnot(all(dt$aa == df0$aa))

cat("\nall done ---\n\n")
```


## Key Special Symbols in `data.table`

### `.N`
- Represents the number of rows in the current group when using `by`. 
- When used without `by`, it gives the total number of rows in the `data.table`.

**Usage:**
```{r}
dt <- data.table(id = c(1, 1, 2, 2), x = c(5, 6, 7, 8))
# Number of rows in each group defined by 'id'
dt[, .(count = .N), by = id]
```

### `.SD` (Subset of Data)
- A 'data.table' itself containing the Subset of Data for each group. 
- Used with `by` for operations on lower-level groupings.
- It doesn't include the columns used in the `by` in the subset by default.

**Usage:**
```{r}
# Calculate the mean of all remaining columns within each group defined by 'id'
dt <- data.table(id = c(1, 1, 2, 2), x = 1:4, y = 5:8)
dt[, lapply(.SD, mean), by = id]
```

### `.SDcols`
- If you want to specify which columns to include in `.SD`, you can use `.SDcols`.

**Usage:**
```{r}
dt <- data.table(id = c(1, 1, 2, 2), x = 1:4, y = 5:8)
# Mean for specified columns
dt[, lapply(.SD, mean), by = id, .SDcols = c("x")]
```

### `.I`
- Refers to the row numbers in the original `data.table`.

**Usage:**
```{r}
dt <- data.table(id = c(1, 2, 2, 1), x = 1:4, y = 5:8)
# Return the row numbers of the first occurrence in each group
dt[, .I[1], by = id]
# all row numbers by group
dt[, .I, by = id]
```

### `.GRP`
- Identifies the current group number within grouped operations.

**Usage:**
```{r}
dt <- data.table(id = c("a", "b", "b", "a"), x = 1:4, y = 5:8)
# Return group numbers
dt[, .(group_number = .GRP), by = id]
```

### `.BY`
- Returns a list of the grouping variable names and values within the current group.
- do not see a use case for it.

**Usage:**
```{r}
dt <- data.table(
  id = c("a", "b", "b", "a", "b"),
  id2 = c("C", "D", "D", "C", "C"),
  x = 1:5,
  y = 5:9
)
# Show each group with their related group name values
dt[, .(id_sum = sum(x), group_info = .BY), by = c("id", "id2")]
```

### Additional Useful Operators:

- **`:=` (Assignment by Reference):**
  - Modifies `data.table` columns in-place for efficiency.
  ```r
  dt[, new_col := x + 1]
  ```

- **`key` and `setkey`:**
  - `key` is for setting a sort order and enhancing joining operations.
  ```r
  setkey(dt, id)
  ```



### double quotes in csv files
RFC4180 standard for csv files: https://www.rfc-editor.org/rfc/rfc4180. Regarding double quotes in the data:

```txt
7.  If double-quotes are used to enclose fields, then a double-quote
       appearing inside a field must be escaped by preceding it with
       another double quote.  For example:

       "aaa","b""bb","ccc"
```


It is a bug that `data.table` cannot correctly read two consective double quotes `""` in a csv file as a single quote, which is a csv standard.

https://stackoverflow.com/questions/67026291/reading-files-with-double-double-quotes-in-r

As a tempory solution, use the following replacement
```r
for (col in names(dt)) {
  tmp <- dat[[col]]
  dt[[col]] <- stringi::stri_replace_all_fixed(tmp, '""', '"')
}
```



```{r}
library(data.table)
dt <- data.table(
  x = c('d"abc""d', "aaa"),
  y = 1:2
)
#           x     y
#      <char> <int>
# 1: d"abc""d     1
# 2:      aaa     2
fwrite(dt, file = "rstats/csv-files/double_quotes.csv")
# x,y
# "d""abc""""d",1
# aaa,2

dt_1 <- fread("rstats/csv-files/double_quotes.csv")
#              x     y
#         <char> <int>
# 1: d""abc""""d     1
# 2:         aaa     2

fwrite(dt_1, file = "rstats/csv-files/double_quotes_1.csv")
# x,y
# "d""""abc""""""""d",1
# aaa,2

# a workaround
for (col in names(dt_1)) {
  tmp <- dt_1[[col]]
  dt_1[[col]] <- stringi::stri_replace_all_fixed(tmp, '""', '"')
}


read.csv("rstats/csv-files/double_quotes.csv")
readr::read_csv("rstats/csv-files/double_quotes.csv")
```


