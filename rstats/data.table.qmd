## fread

### colClass
colClass can be a named vector that sepcify classes of selected columns. Unfortunately, it cannot override a higher type to a lower one. For example, if a column has characters, the column cannot be read into integer. So the colClass for this column is ignored.

Order of types in R: character > numeric > integer

If the higher to lower class reading is intended, do this after reading.

```{r}
library(data.table)
# a sample aaa.csv file
aaa <- utils::read.table(header = TRUE, text = "
 x y z t
 a 1 0 3.14
 b 2 0 1
")
fwrite(aaa, file = "aaa.csv")

col_class <- c(x = "numeric", y = "character", t = "integer")
aaa <- fread("aaa.csv", colClass = col_class)

# result
# - x is read into character. numeric class is ignored.
# - y is read into character "1", "2"
# - z is determined by fread function.
# - t is read into numeric, not integer

# forced conversion
for (col in names(col_class)) {
  if (class(aaa[[col]]) != col_class[col]) {
    if (col_class[col] == "numeric") {
      aaa[[col]] <- as.numeric(aaa[[col]])
    }
    if (col_class[col] == "integer") {
      aaa[[col]] <- as.integer(aaa[[col]])
    }
  }
}
```

## Join `dt2` to`dt1` inplace
Without copying data, join selected columns in `dt2` to `dt1`

```{r}
library(data.table)
dt1 <- data.table(
  id = 1:3,
  x = letters[1:3]
)
dt2 <- data.table(
  id = 1:3,
  y = LETTERS[1:3],
  z = rnorm(3),
  t = "qqqq"
)

# join y and z from dt2 to dt1 in place
dt1[
  dt2,
  on = "id", 
  ":=" (y = i.y, z = i.z)
]
  #       id      x      y          z
  #    <int> <char> <char>      <num>
  # 1:     1      a      A -1.0798453
  # 2:     2      b      B -0.5736653
  # 3:     3      c      C -0.7555166
```


## Fast set data.table elements in a for loop
Try best to avoid for loop over rows in R. If have to, use `set` command with data.table

```{r}
library(data.table)

dt <- data.table(
  id = 1:1e5,
  x = "aaa",
  y = 0
)

# inplace update with :=, 41 sec
system.time({
  s <- 0
  for (i in 1:1e5) {
    s <- s + i
    dt[i, y := s]
  }
})

# update with set, 0.29 sec, > 100 times faster
system.time({
  s <- 0
  for (i in 1:1e5) {
    s <- s + i
    # i for row and j for column
    set(dt, i = i, j = 3L, s)
  }
})


# timing with dplyr
library(dplyr)
n <- 1e5
df <- tibble(
  id = 1:n,
  x = "aaa",
  y = 0
)

# 30 sec
system.time({
  s <- 0
  for (i in 1:n) {
    s <- s + i
    df[i, "y"] <- s  # no copy either
  }
})
```

Additional comparison between `set()` and `:=`:
```{r}
library(data.table)
n <- 1e7

dt <- data.table(
  id = 1:n,
  x = "aaa",
  y = 1:n,
  z = 1:n + 100
)

# 4.8 sec
system.time({
  for (i in 1:n) {
    set(dt, i = i, j = 3L, dt$z[i])
  }
})

# 0.014 sec, much faster than one by one update
system.time({
  set(dt, i = 1:n, j = 3L, dt$z)
})

# 0.002 sec, much faster
system.time({
    dt[, y := z]
})


library(dplyr)
df <- tibble(
  id = 1:n,
  x = "aaa",
  y = 1:n,
  z = 1:n + 100
)

# 0.002 sec
system.time({
  df <- df |>
    mutate(y = z)
})
```

A even better example

```r
library(data.table)
library(dplyr)
library(stringi)

N <- 1e6
ss <- c("aa", "bb", "cc", "dd", "ee", "ff")

set.seed(111)
dtt <- data.table(
  id = 1:N,
  x = "aaa",
  y = rnorm(N),
  aa = paste0(sample(ss), rnorm(N)),
  # the following columns just to make a bigger data frame
  bb = paste0(sample(ss, 1), rnorm(N)),
  cc = paste0(sample(ss, 1), rnorm(N)),
  dd = paste0(sample(ss, 1), rnorm(N)),
  ee = paste0(sample(ss, 1), rnorm(N)),
  ff = paste0(sample(ss, 1), rnorm(N)),
  gg = paste0(sample(ss, 1), rnorm(N)),
  hh = paste0(sample(ss, 1), rnorm(N))
)

cat("\ndata.table := --------------------\n")
dt0 <- copy(dtt)
system.time({
  dt0[stri_detect_fixed(aa, "aa"), aa := stri_replace_all_fixed(aa, "aa", "xxxx")]
  dt0[stri_detect_fixed(aa, "bb"), aa := stri_replace_all_fixed(aa, "bb", "yyyy")]
  dt0[stri_detect_fixed(aa, "cc"), aa := stri_replace_all_fixed(aa, "cc", "zzzz")]
  dt0[stri_detect_fixed(aa, "dd"), aa := stri_replace_all_fixed(aa, "dd", "zzzz")]
  dt0[stri_detect_fixed(aa, "ee"), aa := stri_replace_all_fixed(aa, "ee", "zzzz")]
  dt0[stri_detect_fixed(aa, "ff"), aa := stri_replace_all_fixed(aa, "ff", "zzzz")]
})

cat("\ndplyr ----------------------------\n")
df <- as_tibble(dtt)
system.time({
  df <- df |>
    mutate(aa = ifelse(stri_detect_fixed(aa, "aa"), stri_replace_all_fixed(aa, "aa", "xxxx"), aa)) |>
    mutate(aa = ifelse(stri_detect_fixed(aa, "bb"), stri_replace_all_fixed(aa, "bb", "yyyy"), aa)) |>
    mutate(aa = ifelse(stri_detect_fixed(aa, "cc"), stri_replace_all_fixed(aa, "cc", "zzzz"), aa)) |>
    mutate(aa = ifelse(stri_detect_fixed(aa, "dd"), stri_replace_all_fixed(aa, "dd", "zzzz"), aa)) |>
    mutate(aa = ifelse(stri_detect_fixed(aa, "ee"), stri_replace_all_fixed(aa, "ee", "zzzz"), aa)) |>
    mutate(aa = ifelse(stri_detect_fixed(aa, "ff"), stri_replace_all_fixed(aa, "ff", "zzzz"), aa))
})


cat("\ndata.table set -------------------\n")
dt <- copy(dtt)
system.time({
  ii <- which(stri_detect_fixed(dt$aa, "aa"))
  set(dt, i = ii, j = 4L, stri_replace_all_fixed(dt$aa[ii], "aa", "xxxx"))
  ii <- which(stri_detect_fixed(dt$aa, "bb"))
  set(dt, i = ii, j = 4L, stri_replace_all_fixed(dt$aa[ii], "bb", "yyyy"))
  ii <- which(stri_detect_fixed(dt$aa, "cc"))
  set(dt, i = ii, j = 4L, stri_replace_all_fixed(dt$aa[ii], "cc", "zzzz"))
  ii <- which(stri_detect_fixed(dt$aa, "dd"))
  set(dt, i = ii, j = 4L, stri_replace_all_fixed(dt$aa[ii], "dd", "zzzz"))
  ii <- which(stri_detect_fixed(dt$aa, "ee"))
  set(dt, i = ii, j = 4L, stri_replace_all_fixed(dt$aa[ii], "ee", "zzzz"))
  ii <- which(stri_detect_fixed(dt$aa, "ff"))
  set(dt, i = ii, j = 4L, stri_replace_all_fixed(dt$aa[ii], "ff", "zzzz"))
})


cat("\nnative data.frame ----------------\n")
df0 <- as.data.frame(dtt)
system.time({
  ii <- which(stri_detect_fixed(df0$aa, "aa"))
  df0$aa[ii] = stri_replace_all_fixed(df0$aa[ii], "aa", "xxxx")
  ii <- which(stri_detect_fixed(df0$aa, "bb"))
  df0$aa[ii] = stri_replace_all_fixed(df0$aa[ii], "bb", "yyyy")
  ii <- which(stri_detect_fixed(df0$aa, "cc"))
  df0$aa[ii] = stri_replace_all_fixed(df0$aa[ii], "cc", "zzzz")
  ii <- which(stri_detect_fixed(df0$aa, "dd"))
  df0$aa[ii] = stri_replace_all_fixed(df0$aa[ii], "dd", "zzzz")
  ii <- which(stri_detect_fixed(df0$aa, "ee"))
  df0$aa[ii] = stri_replace_all_fixed(df0$aa[ii], "ee", "zzzz")
  ii <- which(stri_detect_fixed(df0$aa, "ff"))
  df0$aa[ii] = stri_replace_all_fixed(df0$aa[ii], "ff", "zzzz")
})

stopifnot(all(dt$aa == dt0$aa))
stopifnot(all(dt$aa == df$aa))
stopifnot(all(dt$aa == df0$aa))

cat("\nall done ---\n\n")
```

## Key Special Symbols in `data.table`

### `.N`
- Represents the number of rows in the current group when using `by`. 
- When used without `by`, it gives the total number of rows in the `data.table`.

**Usage:**
```{r}
dt <- data.table(id = c(1, 1, 2, 2), x = c(5, 6, 7, 8))
# Number of rows in each group defined by 'id'
dt[, .(count = .N), by = id]
```

### `.SD` (Subset of Data)
- A 'data.table' itself containing the Subset of Data for each group. 
- Used within `by` for operations on lower-level groupings.
- It doesn't include the columns used in the `by` in the subset by default.

**Usage:**
```{r}
# Calculate the mean of all remaining columns within each group defined by 'id'
dt <- data.table(id = c(1, 1, 2, 2), x = 1:4, y = 5:8)
dt[, lapply(.SD, mean), by = id]
```

### `.SDcols`
- If you want to specify which columns to include in `.SD`, you can use `.SDcols`.

**Usage:**
```{r}
dt <- data.table(id = c(1, 1, 2, 2), x = 1:4, y = 5:8)
# Mean for specified columns
dt[, lapply(.SD, mean), by = id, .SDcols = c("x")]
```

### `.I`
- Refers to the row numbers in the original `data.table`.

**Usage:**
```{r}
dt <- data.table(id = c(1, 2, 2, 1), x = 1:4, y = 5:8)
# Return the row numbers of the first occurrence in each group
dt[, .I[1], by = id]
# all row numbers by group
dt[, .I, by = id]
```

### `.GRP`
- Identifies the current group number within grouped operations.

**Usage:**
```{r}
dt <- data.table(id = c("a", "b", "b", "a"), x = 1:4, y = 5:8)
# Return group numbers
dt[, .(group_number = .GRP), by = id]
```

### `.BY`
- Returns a list of the grouping variable names and values within the current group.
- do not see a use case for it.

**Usage:**
```{r}
dt <- data.table(id = c("a", "b", "b", "a", "b"), 
                id2 = c("C", "D", "D", "C", "C"),
                x = 1:5, 
                y = 5:9)
# Show each group with their related group name values
dt[, .(id_sum = sum(x), group_info = .BY), by = c("id", "id2")]
```

### Additional Useful Operators:

- **`:=` (Assignment by Reference):**
  - Modifies `data.table` columns in-place for efficiency.
  ```r
  dt[, new_col := x + 1]
  ```

- **`key` and `setkey`:**
  - `key` is for setting a sort order and enhancing joining operations.
  ```r
  setkey(dt, id)
  ```

### melt: wide to long table

```{r}
library(data.table)
dt <- data.table(
  c1 = 1,
  c2 = 2,
  c3 = 3
)
dt_long <- melt(
  data = dt,
  id.vars = NULL,
  measure.vars = names(dt),
  variable.name = "group",
  value.name = "count",
  variable.factor = FALSE
)
dt_long
#     group count
#    <char> <num>
# 1:     c1     1
# 2:     c2     2
# 3:     c3     3
```


### dcast: long to wide table

```{r}
aaa <- data.table(x = letters[1:3], y = 5:3)
bbb <- dcast(aaa, NULL ~ x, value.var = "y")
# bbb has an extra column whose name and value are "."
names(bbb)
bbb$. <- NULL
```


### double quotes in csv files
It is a bug that `data.table` cannot correctly read two consective double quotes `""` in a csv file as a single quote, which is a csv standard.

https://stackoverflow.com/questions/67026291/reading-files-with-double-double-quotes-in-r

As a tempory solution, use the following replacement
```r
for (col in names(dt)) {
  tmp <- dat[[col]]
  dt[[col]] <- stringi::stri_replace_all_fixed(tmp, '""', '"')
}
```



```{r}
library(data.table)
dt <- data.table(x = c('d"abc""d', "aaa"),
                 y = 1:2)
  #           x     y
  #      <char> <int>
  # 1: d"abc""d     1
  # 2:      aaa     2
fwrite(dt, file = "rstats/csv-files/double_quotes.csv")
  # x,y
  # "d""abc""""d",1
  # aaa,2

dt_1 <- fread("rstats/csv-files/double_quotes.csv")
  #              x     y
  #         <char> <int>
  # 1: d""abc""""d     1
  # 2:         aaa     2

fwrite(dt_1, file = "rstats/csv-files/double_quotes_1.csv")
  # x,y
  # "d""""abc""""""""d",1
  # aaa,2

# a workaround
for (col in names(dt_1)) {
  dt_1[[col]] <- stringi::stri_replace_all_fixed(dt_1[[col]], '""', '"')
}


read.csv("rstats/csv-files/double_quotes.csv")
readr::read_csv("rstats/csv-files/double_quotes.csv")
```