## Structure of this directory
- python.qmd: overall summary for python
- xxxxxx.qmd: summary of a specific topic
- yyyyyy.qmd: summary of another specific topic
- numpy_pkg.py: code for numpy package. Do not name it a numpy.py, as Python will confuse it with the numpy package.
- xxxx_pkg.py: code for another package. Still avoid name conflicts.

## Set up


### use uv to manage Python environment
https://www.youtube.com/watch?v=aVXs8lb7i9U&list=LL&index=1&t=332s
The project is under directory `uv-tryout`.

**Commands**

Installation
- `$ uv python list`: list supported python version
- `$ uv python install cpython-3.12`: install python version
- `$ uv run -p 3.12 python`: start Python REPL

Work with uv project
- `$ uv init -p 3.13`: convert current directory into a uv project. Several new files are generated. 
  - Use default Python version if not given in the command. Can be changed in `.python-version` file.
  - Delete `main.py` if not to use it.
- `$ uv add pydantic_ai`  add dependencies to the project, show up in `pyproject.toml`.
  - also created a virtual environment in .venv
  - `$ source .venv/bin/activate` to activate the virtual environment
- `$ uv run ai.py list all md files` to run a python file.
- `$ uv tree` to list the dependecy tree
- `$ uv remove xxx` to remove a package
- `$uv add pytest --dev` to add tools for development, which is not part of the delivered code.
  - added to `[dependency-groups]` in file `pyproject.tmol`.
- `$ uv tool install ruff` to install general tools outside of the project.
  - `$ ruff check` to check code
  - `$ uv tool list` to check all installed tools
- create an executable
  - add the following section to `pyproject.toml`: where first ai is the name of the executable, second ai is for `ai.py` and main is the function in `ai.py`.
    ```
    [project.scripts]
    ai = "ai:main"
    ```
  - `$ uv build` to build the package for distribution, which is a `uv-tryout/dist/uv_tryout-0.1.0-py3-none-any.whl` file, which can be uploaded to repo like PyPo so others can pip install it.
  - `uv tool install dist/uv_tryout-0.1.0-py3-none-any.whl` to install the package

Create virtual environment with uv
- `$ uv venv --python 3.12`: Create virtual environment inside a project directory and install the python version if not installed already. 
- `$ source .venv/bin/activate`: Activate the virtual environment

- `$ uv pip install -r requirements.txt`: Install packages from a requirements.txt
- `$ ai list all md files` to use the new executable


### use virtual environment --- see uv above
Debian is very restrictive in installing Python package system-wide or user-wide. So the best practice is to create virtual environments for specific projects. Typically we only need a couple of virtual environments for tasks like data science and web applications.
```sh
# create a data science virtual environment
$ python3 -m venv ~/projects/my_ds_venv
# To activate the environment for any data-science project
$ source ~/projects/my_ds_venv/bin/activate
# generate installed packages of the virtual environment
$ pip freeze > requirements.txt
# replicate installed packages in another virtual environment
$ pip install -r requirements.txt   # activate this virtual environment first
```

### install packages from a file
In a virtual environment, to generate requirements.txt which contains installed packages
```sh
pip freeze > requirments.txt
```
Edit the file if necessary, for example, some packages might be specific to the computer hardward.

To install the same packages in a new virtual environment on any computer:
```sh
pip install -r requirements.txt
```

### use ipython for REPL
It is used in `iron.lua` for LazyVim.

To get documentation of a function at ipython console:

`> help(np.argmax)`

### use `.env` for environment variables
Add to `.env` at the root directory of the project such as 
  OPENAI_API_KEY=your-api-key-here
Add `.env` to `.gitignore` to avoid publishing secret accidentally.

```{python}
from dotenv import load_dotenv
import os
from openai import OpenAI
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
```


## tricks

### unpack a dictionary as function argument with `**`
The dictionary keys must match function parameters.

```{python}
dic = {"x": 100, "y": 200}
def add(x, y):
    return(x + y)
    
add(**dic)
    # 300
```


### unpack iterables with `*`
For example, function `map()` returns a map object. The map object can be unpacked inside a list `[...]`.

```{python}
def square(x):
    return x ** 2

numbers = [1, 2, 3, 4]
# result is a map iterable
result = map(square, numbers)
# unpack inside a list function
[*result]
# after unpacking, result becomes empty. The following is an empty list.
[*result]

# we can also combine with [..., *map()]
[111, 222, *map(square, numbers)]
```



## Packages

### numpy
See `numpy_pkg.py` for code examples

- `np.argmax(arr, axis)`: get the index of the largest value along an axis
